type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type Member = record {
  xp : nat64;
  "principal" : principal;
  username : text;
  level : nat64;
  roles : nat64;
};
type MemberError = variant { PrincipalAlreadyRegistered; UsernameExists };
type Result = variant { Ok : opt Member; Err : MemberError };
type StreamingStrategy = variant {
  Callback : record { token : record {}; callback : func () -> () query };
};
service : {
  add_to_log : (text) -> ();
  create_member : (text) -> (Result);
  get_all_members : () -> (vec Member) query;
  get_logs : () -> (vec text) query;
  http_request : (HttpRequest) -> (HttpResponse);
}
